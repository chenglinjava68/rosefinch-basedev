<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:repository="http://www.springframework.org/schema/data/repository"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
<context:property-placeholder location="classpath*:spring-config.properties" />
	<!-- 对web包中的所有类进行扫描，已完成Bean创建和自动依赖注入的功能 -->  
    <!-- 扫描所有的controller -->
	<context:component-scan base-package="com.ycgwl.**.server.controller">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan> 
     <bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
	</bean>
	 <!-- 相当于注册了DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter两个bean，
	        配置一些messageconverter。即解决了@Controller注解的使用前提配置 
     -->  

    <mvc:annotation-driven validator="validator">
		<mvc:argument-resolvers>
			<bean class="com.ycgwl.framework.springmvc.arg.FormModelMethodArgumentResolver" />
			<bean class="com.ycgwl.framework.springmvc.arg.ArrayCommandMethodArgumentResolver" />
		</mvc:argument-resolvers>
		<mvc:message-converters register-defaults="true">
			<bean class="com.ycgwl.framework.springmvc.json.FrontendMappingJackson2HttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>application/json</value>
						<value>text/json</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
    <!-- 这里拦截器还有一种配置方法【针对路径进行配置】 推荐使用这个，方便直观-->  

    <!-- 启用基于注解的处理器映射，添加拦截器，类级别的处理器映射 -->
      	
     <!-- 全局配置    --> 
    <mvc:interceptors>  
        <!-- 对外开放接口权限拦截器 -->
        <!-- <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class=" com.ycgwl.rosefinch.module.basedev.server.interceptor.base.AuthInterceptor">
            	<property name="expiredTime" value="${interface.expiredTime}"/> -->
                <!-- 无需拦截列表 -->
                <!-- <property name="excludeUrls">
                    <list>
                        <value>/html/demo/getDemoList</value>
                    </list>
                </property>
            </bean>
        </mvc:interceptor> -->
    	<mvc:interceptor>
    		<mvc:mapping path="/**" />
			<bean class="com.ycgwl.framework.springmvc.interceptor.ModuleInterceptor" />
        </mvc:interceptor>
        <mvc:interceptor>
        	<mvc:mapping path="/**" />
         	<bean class="com.ycgwl.framework.springmvc.interceptor.SecurityInterceptor"/>
        </mvc:interceptor>
        <mvc:interceptor>
        	<mvc:mapping path="/**" />
         	<bean class="com.ycgwl.framework.springmvc.interceptor.PerformanceWatchInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>  

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 指定所上传文件的总大小不能超过200KB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
		<property name="defaultEncoding" value="UTF-8"></property>
		<property name="maxUploadSize" value="2000000" />
		<property name="maxInMemorySize" value="4098"></property>
	</bean>
    <!-- jsp页面解析器，当Controller返回XXX字符串时，先通过拦截器，然后该类就会在/WEB-INF/pages/目录下，查找XXX.jsp文件-->  
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        <property name="prefix" value="/WEB-INF/pages/"></property>  
        <property name="suffix" value=".jsp"></property>  
    </bean>  
</beans>
